# name: 'build and release'

# on:
#   push:
#     # Sequence of patterns matched against refs/tags
#     tags:
#       # Push events to matching v*, i.e. v1.0, v20.15.10
#       - 'v*'

# env:
#   IMAGEMAGICK_VERSION: 7.0.10-25

# jobs:
#   # make sure build/ci work properly
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v2
#       - run: |
#           npm install
#       - run: |
#           npm run build && npm run format && npm run lint && npm run package
#       # - run: |
#       #     npm run all

#   compile:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2

#       - id: download_artifact
#         name: Download artifact
#         uses: dawidd6/action-download-artifact@v2
#         continue-on-error: true
#         with:
#           # Optional, GitHub token
#           github_token: ${{ secrets.GITHUB_TOKEN }}
#           # Required, workflow file name or ID
#           workflow: release.yml
#           # Optional, will use the branch
#           # branch: master
#           # Optional, will get head commit SHA
#           # pr: ${{ github.event.pull_request.number }}
#           # Optional, no need to specify if PR is
#           # commit: ${{ github.event.pull_request.head.sha }}
#           commit: 64db9ad751c66a4ca568cef2e5426e2897d1ab3f
#           # Required, uploaded artifact name
#           name: ImageMagick-${{ env.IMAGEMAGICK_VERSION }}-x64-precompiled
#           # Optional, directory where to extract artifact
#           path: ../ImageMagick-${{ env.IMAGEMAGICK_VERSION }}-x64-precompiled

#       - run: ls -alh ../ImageMagick-${{ env.IMAGEMAGICK_VERSION }}-x64-precompiled/lib

#       - id: compiled_source
#         uses: ./

#         env:
#           LDFLAGS: '-L/usr/local/lib -R/usr/local/lib'

#         with:
#           version: ${{ env.IMAGEMAGICK_VERSION }}
#           # configure_args: '--with-modules --disable-installed'
#           configure_args: '--with-modules'
#           skip_cache: true
#           skip_check: true
#           # compile_fallback: true
#           artifact_path: ../ImageMagick-${{ env.IMAGEMAGICK_VERSION }}-x64-precompiled

#       - run: which -a convert
#       - run: convert --version
#       - run: identify -list configure
#       - run: identify -list format

#       - name: Convert a pdf into png
#         run: convert -thumbnail 250x250 -background white -alpha remove -flatten ./test/sample.pdf thumbs.png

#       - uses: actions/upload-artifact@v2
#         with:
#           name: ${{ steps.compiled_source.outputs.artifactName }}
#           path: ${{ steps.compiled_source.outputs.artifactDir }}
#           if-no-files-found: error

#       - name: Create tar file
#         run: |-
#           artifactName=${{ steps.compiled_source.outputs.artifactName }}
#           artifactDir=${{ steps.compiled_source.outputs.artifactDir }}

#           echo $(pwd)/${artifactName}.tar.gz

#           tar \
#             -C "$(dirname "$artifactDir")" \
#             -czvhf --preserve-permissions \
#             ${artifactName}.tar.gz \
#             "$(basename "$artifactDir")"

#       - name: Create Release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ github.ref }}
#           release_name: Release ${{ github.ref }}
#           draft: false
#           prerelease: true

#       - name: Upload Release Asset
#         id: upload-release-asset
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#           upload_url: ${{ steps.create_release.outputs.upload_url }}
#           asset_name: ${{ steps.compiled_source.outputs.artifactName }}.tar.gz
#           asset_path: ./${{ steps.compiled_source.outputs.artifactName }}.tar.gz
#           asset_content_type: application/gzip

#   test_artifact:
#     runs-on: ubuntu-latest

#     needs: [compile]

#     steps:
#       - uses: actions/checkout@v2

#       - id: download_artifact
#         name: Download artifact
#         uses: actions/download-artifact@v2
#         with:
#           name: ImageMagick-${{ env.IMAGEMAGICK_VERSION }}-x64-precompiled
#           path: ../ImageMagick-${{ env.IMAGEMAGICK_VERSION }}-x64-precompiled

#       - run: ls -alh ../ImageMagick-${{ env.IMAGEMAGICK_VERSION }}-x64-precompiled/lib

#       - uses: ./
#         with:
#           version: ${{ env.IMAGEMAGICK_VERSION }}
#           # artifact_path: ../ImageMagick-${{ env.IMAGEMAGICK_VERSION }}-x64-precompiled
#           artifact_path: ${{ steps.download_artifact.outputs.download-path }}
#           skip_cache: true

#       - run: which -a convert
#       - run: convert --version
#       - run: identify -list configure
#       - run: identify -list format

#       - name: Convert a pdf into png
#         run: convert -thumbnail 250x250 -background white -alpha remove -flatten ./test/sample.pdf thumbs.png

#   test_release:
#     runs-on: ubuntu-latest

#     needs: [compile]

#     steps:
#       - uses: actions/checkout@v2

#       - uses: olegtarasov/get-tag@v2
#         id: tagName

#       - id: compiled_source
#         uses: ./
#         with:
#           version: ${{ env.IMAGEMAGICK_VERSION }}
#           release_tag: ${{ steps.tagName.outputs.tag }}
#           skip_cache: true

#       - run: ls -alh ${{ steps.compiled_source.outputs.artifactDir }}/lib

#       - run: which -a convert
#       - run: convert --version
#       - run: identify -list configure
#       - run: identify -list format

#       - name: Convert a pdf into png
#         run: convert -thumbnail 250x250 -background white -alpha remove -flatten ./test/sample.pdf thumbs.png
#       # - name: Rollback Release
#       #   if: failure()
#       #   uses: author/action-rollback@master
#       #   with:
#       #     # # Using a known release ID
#       #     # id: ${{ steps.create_release.id }}
#       #     # Using a tag name
#       #     tag: ${{ steps.tagName.outputs.tag }}
#       #     # Always delete the tag, even if a release is not associated with it.
#       #     delete_orphan_tag: true
#       #   env:
#       #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
